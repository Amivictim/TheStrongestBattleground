-- ðŸŒœðŸ™‰ðŸ™ˆðŸ™‰ðŸŒ› --

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Lighting = game:GetService("Lighting")
local Terrain = workspace.Terrain

local localPlayer = Players.LocalPlayer
repeat task.wait() until localPlayer and localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart")

local mainUsername = mainuser
local mainPosition = Vector3.new(361, 440, 428)
local otherPosition = Vector3.new(359, 440, 425)
local maxDistance = 3
local activeTasks = {}

local function getCharacterAndRootPart()
    local character = localPlayer.Character
    if character then
        local rootPart = character:FindFirstChild("HumanoidRootPart")
        if rootPart then
            return character, rootPart
        end
    end
    return nil, nil
end

local function keepCharacterInPosition()
    while true do
        local _, rootPart = getCharacterAndRootPart()
        if rootPart then
            local targetPosition = localPlayer.Name == mainUsername and mainPosition or otherPosition
            if (rootPart.Position - targetPosition).Magnitude > maxDistance then
                rootPart.CFrame = CFrame.new(targetPosition)
            end
        end
        task.wait(0.1)
    end
end

local function findClosestPlayer()
    local _, rootPart = getCharacterAndRootPart()
    if not rootPart then return nil end

    local closestPlayer = nil
    local closestDistance = math.huge

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= localPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local distance = (rootPart.Position - player.Character.HumanoidRootPart.Position).Magnitude
            if distance < closestDistance then
                closestDistance = distance
                closestPlayer = player
            end
        end
    end

    return closestPlayer
end

local function rotateToClosestPlayer()
    while true do
        local _, rootPart = getCharacterAndRootPart()
        if rootPart then
            local closestPlayer = findClosestPlayer()
            if closestPlayer and closestPlayer.Character then
                local targetPos = closestPlayer.Character.HumanoidRootPart.Position
                local lookAtCFrame = CFrame.lookAt(rootPart.Position, Vector3.new(targetPos.X, rootPart.Position.Y, targetPos.Z))
                rootPart.CFrame = lookAtCFrame
            end
        end
        task.wait(0.1)
    end
end

local function fireEvents()
    while true do
        if localPlayer.Name == mainUsername then
            local args1 = {
                [1] = {
                    ["Mobile"] = true,
                    ["Goal"] = "LeftClick"
                }
            }
            game:GetService("Players").LocalPlayer.Character.Communicate:FireServer(unpack(args1))

            task.wait(0.1)

            local skills = {"Blitz Shot", "Jet Dive", "Ignition Burst", "Machine Gun Blows"}

            for _, skill in ipairs(skills) do
                local tool = localPlayer.Backpack:FindFirstChild(skill)
                if tool then
                    local args2 = {
                        [1] = {
                            ["Tool"] = tool,
                            ["Goal"] = "Console Move"
                        }
                    }
                    game:GetService("Players").LocalPlayer.Character.Communicate:FireServer(unpack(args2))
                end
                task.wait(0.1)
            end
        end
        task.wait(0.1)
    end
end

local function monitorDeath()
    while true do
        local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()
        character:WaitForChild("Humanoid").Died:Connect(function()
            repeat task.wait() until localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart")
        end)
        task.wait(0.1)
    end
end

local function monitorKills()
    local leaderstats = localPlayer:WaitForChild("leaderstats")
    local kills = leaderstats:WaitForChild("Kills")

    kills.Changed:Connect(function()
        if kills.Value % 9 == 0 and kills.Value > 0 then
            local resetArgs = {
                [1] = {
                    ["Goal"] = "Reset"
                }
            }
            game:GetService("Players").LocalPlayer.Character.Communicate:FireServer(unpack(resetArgs))
        end
    end)
end

local function antiAfk()
    local VirtualUser = game:GetService("VirtualUser")
    localPlayer.Idled:Connect(function()
        VirtualUser:Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
        task.wait(1)
        VirtualUser:Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
    end)
end

local function antiLag()
    Terrain.WaterWaveSize = 0
    Terrain.WaterWaveSpeed = 0
    Terrain.WaterReflectance = 0
    Terrain.WaterTransparency = 0

    Lighting.GlobalShadows = false
    Lighting.FogEnd = 9e9
    Lighting.Brightness = 0

    for _, child in pairs(workspace:GetDescendants()) do
        if child:IsA("BasePart") and child.Name ~= "Terrain" then
            child.Material = Enum.Material.Plastic
            child.Reflectance = 0
        elseif child:IsA("Decal") or child:IsA("Texture") then
            child:Destroy()
        elseif child:IsA("ParticleEmitter") or child:IsA("Fire") or child:IsA("Smoke") then
            child.Enabled = false
        elseif child:IsA("Explosion") then
            child.Visible = false
        end
    end
end

local function restartTask(name, func)
    if activeTasks[name] then
        task.cancel(activeTasks[name])
    end
    activeTasks[name] = task.spawn(func)
end

local function checkAndRestartTasks()
    while true do
        restartTask("keepCharacterInPosition", keepCharacterInPosition)
        restartTask("rotateToClosestPlayer", rotateToClosestPlayer)
        restartTask("fireEvents", fireEvents)
        restartTask("monitorDeath", monitorDeath)
        restartTask("antiAfk", antiAfk)
        restartTask("antiLag", antiLag)
        task.wait(5) 
    end
end

monitorKills()
task.spawn(checkAndRestartTasks)
